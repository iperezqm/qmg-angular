{"version":3,"sources":["../../unit/http_spinner/httpWithSpinner.spec.js","../../unit/tracking/qmgTrack.directive.spec.js"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["'use strict';\n\ndescribe('httpWithSpinner', () => {\n    var httpWithSpinner;\n    var $http;\n    var $modal;\n    var sandbox;\n    var closeModalStub;\n    var finallyCallback;\n\n    beforeEach(() => {\n        inject((_httpWithSpinner_, _$http_, _$modal_) => {\n            httpWithSpinner = _httpWithSpinner_;\n            $http = _$http_;\n            $modal = _$modal_;\n        });\n\n        sandbox = sinon.sandbox.create();\n        closeModalStub = sandbox.stub();\n\n        sandbox.stub($modal, 'open').returns({\n            close: closeModalStub\n        });\n    });\n\n    afterEach(() => {\n        sandbox.restore();\n    });\n\n    var testHttpMethod = (methodName) => {\n        describe(methodName, () => {\n            it('should display a spinner overlay just before initializing a request', () => {\n                sandbox.spy($http, methodName);\n                httpWithSpinner[methodName]();\n                expect($modal.open).to.have.been.called;\n                expect($http[methodName]).to.have.been.called;\n            });\n\n            it('should close a spinner overlay once the request returns', () => {\n                sandbox.stub($http, methodName).returns({\n                    'finally': (callback) => finallyCallback = callback\n                });\n                httpWithSpinner[methodName]();\n                finallyCallback();\n                expect(closeModalStub).to.have.been.called;\n            });\n        });\n    };\n\n    testHttpMethod('get');\n    testHttpMethod('post');\n});\n","'use strict';\n\ndescribe('qmgTrack directive', () => {\n    var $compile;\n    var scope;\n\n    var compileWithAttributes = (attributes) => {\n        var element = $compile(`<div ${attributes}></div>`)(scope);\n        scope.$digest();\n        return element;\n    };\n\n    beforeEach(() => {\n        angular.module('QMetric.oneAccount.config', []);\n\n        module('QMetric.tracking');\n\n        inject((_$compile_, $rootScope) => {\n            $compile = _$compile_;\n            scope = $rootScope.$new();\n        });\n    });\n\n    it('should remove qmg-track attribute', () => {\n        var element = compileWithAttributes('qmg-track');\n\n        expect(element.attr('qmg-track')).to.be.undefined;\n    });\n\n    it('should add analytics-on attribute', () => {\n        var element = compileWithAttributes('qmg-track');\n\n        expect(element.attr('analytics-on')).to.equal('');\n    });\n\n    it('should track non-default events', () => {\n        var element = compileWithAttributes(`qmg-track=\"'click'\"`);\n\n        expect(element.attr('analytics-event')).to.equal('click');\n    });\n\n    it('should define tracking event labels', () => {\n        var element = compileWithAttributes(`qmg-track qmg-event-label=\"'thisIsTheLabel'\"`);\n\n        expect(element.attr('qmg-event-label')).to.be.undefined;\n        expect(element.attr('analytics-label')).to.equal('thisIsTheLabel');\n    });\n\n    it('should read qmg-tracking-category from closest parent element', () => {\n        var parentElement = $compile(`<div qmg-tracking-category=\"'parentCategory'\"><div qmg-tracking-category=\"'inheritedCategory'\"><p qmg-track></p></div></div>`)(scope);\n        var element = parentElement.find('p');\n        scope.$digest();\n        expect(element.attr('analytics-category')).to.equal('inheritedCategory');\n    });\n});\n"]}