{"version":3,"sources":["../../../unit/http_spinner/httpWithSpinner.spec.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,QAAQ,CAAC,iBAAiB,EAAE,YAAM;AAC9B,QAAI,eAAe,CAAC;AACpB,QAAI,KAAK,CAAC;AACV,QAAI,MAAM,CAAC;AACX,QAAI,OAAO,CAAC;AACZ,QAAI,cAAc,CAAC;AACnB,QAAI,eAAe,CAAC;;AAEpB,cAAU,CAAC,YAAM;AACb,cAAM,CAAC,UAAC,iBAAiB,EAAE,OAAO,EAAE,QAAQ,EAAK;AAC7C,2BAAe,GAAG,iBAAiB,CAAC;AACpC,iBAAK,GAAG,OAAO,CAAC;AAChB,kBAAM,GAAG,QAAQ,CAAC;SACrB,CAAC,CAAC;;AAEH,eAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;AACjC,sBAAc,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;;AAEhC,eAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC;AACjC,iBAAK,EAAE,cAAc;SACxB,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,aAAS,CAAC,YAAM;AACZ,eAAO,CAAC,OAAO,EAAE,CAAC;KACrB,CAAC,CAAC;;AAEH,QAAI,cAAc,GAAG,SAAjB,cAAc,CAAI,UAAU,EAAK;AACjC,gBAAQ,CAAC,UAAU,EAAE,YAAM;AACvB,cAAE,CAAC,qEAAqE,EAAE,YAAM;AAC5E,uBAAO,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AAC/B,+BAAe,CAAC,UAAU,CAAC,EAAE,CAAC;AAC9B,sBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AACxC,sBAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;aACjD,CAAC,CAAC;;AAEH,cAAE,CAAC,yDAAyD,EAAE,YAAM;AAChE,uBAAO,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC;AACpC,6BAAS,EAAE,kBAAC,QAAQ;+BAAK,eAAe,GAAG,QAAQ;qBAAA;iBACtD,CAAC,CAAC;AACH,+BAAe,CAAC,UAAU,CAAC,EAAE,CAAC;AAC9B,+BAAe,EAAE,CAAC;AAClB,sBAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;aAC9C,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC;;AAEF,kBAAc,CAAC,KAAK,CAAC,CAAC;AACtB,kBAAc,CAAC,MAAM,CAAC,CAAC;CAC1B,CAAC,CAAC","file":"httpWithSpinner.spec.js","sourcesContent":["'use strict';\n\ndescribe('httpWithSpinner', () => {\n    var httpWithSpinner;\n    var $http;\n    var $modal;\n    var sandbox;\n    var closeModalStub;\n    var finallyCallback;\n\n    beforeEach(() => {\n        inject((_httpWithSpinner_, _$http_, _$modal_) => {\n            httpWithSpinner = _httpWithSpinner_;\n            $http = _$http_;\n            $modal = _$modal_;\n        });\n\n        sandbox = sinon.sandbox.create();\n        closeModalStub = sandbox.stub();\n\n        sandbox.stub($modal, 'open').returns({\n            close: closeModalStub\n        });\n    });\n\n    afterEach(() => {\n        sandbox.restore();\n    });\n\n    var testHttpMethod = (methodName) => {\n        describe(methodName, () => {\n            it('should display a spinner overlay just before initializing a request', () => {\n                sandbox.spy($http, methodName);\n                httpWithSpinner[methodName]();\n                expect($modal.open).to.have.been.called;\n                expect($http[methodName]).to.have.been.called;\n            });\n\n            it('should close a spinner overlay once the request returns', () => {\n                sandbox.stub($http, methodName).returns({\n                    'finally': (callback) => finallyCallback = callback\n                });\n                httpWithSpinner[methodName]();\n                finallyCallback();\n                expect(closeModalStub).to.have.been.called;\n            });\n        });\n    };\n\n    testHttpMethod('get');\n    testHttpMethod('post');\n});\n"]}